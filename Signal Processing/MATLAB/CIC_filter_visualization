function main
    % Main program entry point
    disp('Starting CIC filter visualization...');
    cic_filter_with_sliders();
end

function cic_filter_with_sliders
    % Initial parameters
    fs = 1000; % Sampling frequency in Hz
    R = 64; % Initial Length of the moving average filter
    N = 1; % Initial Stages
    M = 1;
    fc = fs/(4*R*N); %% Pass band edge in Hz
    impulse = [1, zeros(1, 1023)]; % Impulse signal (length 1024)
        
    % Frequency axis for FFT (normalized to fs)
    f_fft = (-0.512*fs:0.511*fs) * (1 / 1024); % Frequency axis normalized to fs
    
    % Create figure
    fig = figure('Name', 'CIC Filter Visualization', 'NumberTitle', 'off', 'Position', [100, 100, 1200, 600]);
    
    % Add a panel for sliders in the top-right corner
    sliderPanel = uipanel('Parent', fig, 'Title', 'Parameters', 'Position', [0.75, 0.65, 0.2, 0.3]);
    
    % Slider for R
    uicontrol('Parent', sliderPanel, 'Style', 'text', 'Position', [10, 100, 100, 20], ...
        'String', 'R (Length)', 'HorizontalAlignment', 'left');
    slider_R = uicontrol('Parent', sliderPanel, 'Style', 'slider', 'Min', 2, 'Max', 128, 'Value', R, ...
        'Position', [10, 80, 180, 20], 'Callback', @updatePlot);
    
    % Display the current value of R
    value_R = uicontrol('Parent', sliderPanel, 'Style', 'text', 'Position', [10, 60, 180, 20], ...
        'String', sprintf('R = %d', R), 'HorizontalAlignment', 'center');
    
    % Slider for N
    uicontrol('Parent', sliderPanel, 'Style', 'text', 'Position', [10, 40, 100, 20], ...
        'String', 'N (Stages)', 'HorizontalAlignment', 'left');
    slider_N = uicontrol('Parent', sliderPanel, 'Style', 'slider', 'Min', 1, 'Max', 10, 'Value', N, ...
        'Position', [10, 20, 180, 20], 'Callback', @updatePlot);
    
    % Display the current value of N
    value_N = uicontrol('Parent', sliderPanel, 'Style', 'text', 'Position', [10, 0, 180, 20], ...
        'String', sprintf('N = %d', N), 'HorizontalAlignment', 'center');
    
    % Initial plot
    updatePlot();
    
    function updatePlot(~, ~)
        % Get slider values
        R = round(get(slider_R, 'Value'));
        N = round(get(slider_N, 'Value'));
        
        % Update text displays for R and N
        set(value_R, 'String', sprintf('R = %d', R));
        set(value_N, 'String', sprintf('N = %d', N));
        
        % fir2.m parameters
        L = 110; %% Filter order; must be even
        Fo = R*fc/fs; %% Normalized Cutoff freq; 0<Fo<=0.5/M;
        p = 2e3; %% Granularity
        s = 0.25/p; %% Step size
        fpass = [0:s:Fo]; %% Pass band frequency samples
        fstop = (Fo+s):s:0.5; %% Stop band frequency samples
        f = [fpass fstop]*2; %% Normalized frequency samples; 0<=f<=1
        Mp = ones(1,length(fpass)); %% Pass band response; Mp(1)=1
        Mp(2:end) = abs( M*R*sin(pi*fpass(2:end)/R)./sin(pi*M*fpass(2:end))).^N;
        Mf = [Mp zeros(1,length(fstop))];
        f(end) = 1;

        % Design FIR compensator using fir2
        h = fir2(L,f,Mf); %% Filter length L+1
        h = h/max(h); %% Normalize floating point coefficients
        
        % Frequency response (FFT) of the filter
        H = fft(h, 1024); %% Compute FFT of the filter impulse response
        H = fftshift(H); % Shift FFT to center the zero frequency
        H = H/max(H);
        
        % CIC filter coefficients
        cic = ones(1, R)/R; % Moving average filter coefficients
        
        % Pass impulse through moving average filter N times
        output_cic = filter(cic, 1, impulse); % Output of moving average filter
        for i = 1:N-1
            output_cic = filter(cic, 1, output_cic); 
        end
        
        % FFT of CIC filter impulse response 
        fft_cic = fft(output_cic, 1024); % FFT of moving average filter output
        fft_cic = fftshift(fft_cic); % Shift FFT to center the zero frequency
        
        % Clear figure and plot results
        subplot(2, 1, 1, 'Parent', fig, 'Position', [0.1, 0.55, 0.8, 0.4]); % Top plot
        hold on;
        plot(f_fft / fs, abs(fft_cic), 'b', 'DisplayName', 'CIC FFT'); % CIC in blue
        plot(f_fft / fs, abs(H), 'r', 'DisplayName', 'FIR FFT'); % FIR in red
        hold off;
        legend('show');
        title(sprintf('Magnitude Response\nR = %d, N = %d', R, N));
        xlabel('Normalized Frequency (f/fs)');
        ylabel('Magnitude');
        grid on;
        
        % Phase frequency-domain plot for CIC filter (normalized to fs)
        subplot(2, 1, 2, 'Parent', fig, 'Position', [0.1, 0.1, 0.8, 0.35]); % Bottom plot
        plot(f_fft / fs, unwrap(angle(fft_cic)), 'b', 'DisplayName', 'CIC Phase'); % CIC phase
        hold on;
        plot(f_fft / fs, unwrap(angle(H)), 'r', 'DisplayName', 'FIR Phase'); % FIR phase
        hold off;
        legend('show');
        title(sprintf('Phase Response\nR = %d, N = %d', R, N));
        xlabel('Normalized Frequency (f/fs)');
        ylabel('Phase (radians)');
        grid on;
    end
end
